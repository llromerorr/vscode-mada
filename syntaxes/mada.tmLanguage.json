{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mada",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#meta"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#bools"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#storage"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash",
					"match": "\\/\\/.*"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "(?i)\\b(si|entonces|sino|fsi|mientras|fmientras|repetir|para|hasta|en|hacer|fpara|seleccion|fseleccion)\\b"
				},
				{
					"name": "entity.name.type",
					"match": "(?i)\\b(entero|real|logico|cadena|caracter|archivo|nulo|arreglo)\\b"
				},
				{
					"name": "keyword.control",
					"match": "(?i)\\b(retornar)\\b"
				},
				{
					"name": "keyword.other",
					"match": "(?i)\\b(ref|val)\\b"
				},
				{
					"name": "keyword.operator",
					"match": "(?i)\\b(and|or|not|div|mod|de)\\b"
				},
				{
					"name": "keyword.control",
					"match": "(?i)\\b(inicio|fin|algoritmo|variables|constantes|tipos)\\b"
				},
				{
					"name": "keyword.declaration.function",
					"match": "(?i)\\b(funcion|ffuncion|procedimiento|fprocedimiento)\\b"
				},
				{
					"name": "keyword.declaration.class",
					"match": "(?i)\\bclase\\b"
				},
				{
					"name": "keyword.declaration.struct",
					"match": "(?i)\\bregistro\\b"
				},
				{
					"name": "meta.function-call",
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?= *\\(.*?\\))",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				}
			]
		},
		"meta": {
			"patterns": [
				{
					"name": "meta.function",
					"begin": "(?i)\\b(estatico |privado |publico )?((funcion|procedimiento)) ([a-zA-Z_][a-zA-Z0-9_]*)\\(((.*?))\\) *(?:\\{|(do))",
					"end": "(?i)(?:\\}|(end))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier"
						},
						"2": {
							"name": "keyword.declaration.function"
						},
						"3": {
							"name": "storage.type.function"
						},
						"4": {
							"name": "entity.name.function"
						},
						"5": {
							"name": "meta.parameters"
						},
						"6": {
							"name": "variable.parameter"
						},
						"7": {
							"name": "keyword.control"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.control"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#meta"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#entities"
						},
						{
							"include": "#storage"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#variables"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#bools"
						}
					]
				},
				{
					"name": "meta.class",
					"begin": "(?i)\\b(estatico |privado |publico )?((clase)) ([a-zA-Z_][a-zA-Z0-9_]*) *(?:(extiende) *([a-zA-Z_][a-zA-Z0-9_]*))? *(?:\\{|(do))",
					"end": "(?i)(?:\\}|(end))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier"
						},
						"2": {
							"name": "keyword.declaration.class"
						},
						"3": {
							"name": "storage.type.class"
						},
						"4": {
							"name": "entity.name.type.class"
						},
						"5": {
							"name": "storage.modifier"
						},
						"6": {
							"name": "entity.other.inherited-class"
						},
						"7": {
							"name": "keyword.control"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.control"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#meta"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#entities"
						},
						{
							"include": "#storage"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#variables"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#bools"
						}
					]
				},
				{
					"name": "meta.struct",
					"begin": "(?i)\\b(estatico |privado |publico )?((registro)) ([a-zA-Z_][a-zA-Z0-9_]*) *(?:\\{|(=))",
					"end": "(?i)(?:\\}|(fregistro))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier"
						},
						"2": {
							"name": "keyword.declaration.struct"
						},
						"3": {
							"name": "storage.type.struct"
						},
						"4": {
							"name": "entity.name.type.struct"
						},
						"5": {
							"name": "storage.modifier"
						},
						"6": {
							"name": "keyword.control"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.control"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#meta"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#entities"
						},
						{
							"include": "#storage"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#variables"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#bools"
						}
					]
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.type.function",
					"match": "(?i)\\b(funcion|procedimiento)\\b"
				},
				{
					"name": "storage.type.class",
					"match": "(?i)\\bclase\\b"
				},
				{
					"name": "storage.type.struct",
					"match": "(?i)\\bregistro\\b"
				},
				{
					"name": "storage.modifier",
					"match": "(?i)\\bextiende\\b"
				},
				{
					"name": "storage.modifier",
					"match": "(?i)\\bestatico\\b"
				},
				{
					"name": "storage.modifier",
					"match": "(?i)\\bpublico\\b"
				},
				{
					"name": "storage.modifier",
					"match": "(?i)\\bprivado\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				},
				{
					"name": "string.template",
					"begin": "(\\$\\{)((.*?))(?=\\})",
					"end": "(\\})",	
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.template-expression.begin"
						},
						"2": {
							"name": "meta.template.expression"
						},
						"3": {
							"name": "meta.embedded.line",
							"patterns": [
								{ "include": "#meta" },
								{ "include": "#entities" },
								{ "include": "#storage" },
								{ "include": "#variables" },
								{ "include": "#strings" },
								{ "include": "#numbers" },
								{ "include": "#punctuation" }
							]
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.template-expression.end"
						}
					},
					"patterns": [
						{ "include": "#meta" },
						{ "include": "#entities" },
						{ "include": "#storage" },
						{ "include": "#variables" },
						{ "include": "#strings" },
						{ "include": "#numbers" },
						{ "include": "#punctuation" }
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer",
					"match": "\\b[0-9]+(?![0-9]*\\.)\\b"
				},
				{
					"name": "constant.numeric.float",
					"match": "\\b[0-9]+\\.[0-9]+\\b"
				}
			]
		},
		"bools": {
			"patterns": [{
				"name": "constant.language.pesudocode",
				"match": "(?i)\\b(verdad|falso|nulo)\\b"
			}]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.function",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
				},
				{
					"name": "variable.other",
					"match": "[a-zA-Z_][a-zA-Z0-9_]*"
				},
				{
					"name": "variable.parameter",
					"match": "(?i)(?<=funcion [a-zA-Z0-9_]\\().*?(?=\\))"
				},
				{
					"name": "variable.parameter",
					"match": "(?i)(?<=procedimiento [a-zA-Z0-9_]\\().*?(?=\\))"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
				},
				{
					"name": "entity.name.class",
					"match": "(?i)\\b(?<=clase )[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
				},
				{
					"name": "entity.name.struct",
					"match": "(?i)\\b(?<=registro )[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator",
					"match": ","
				},
				{
					"name": "punctuation.terminator",
					"match": ";"
				},
				{
					"name": "punctuation.accessor",
					"match": "\\."
				}
			]
		}
	},
	"scopeName": "source.mada"
}